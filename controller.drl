from DRCF import *
from threading import Lock # per comunicare più rapidamente circa 20ms più latenza. Scambia dati in modo continuo e evito la race condition.
import time

def print_log(msg):
    tp_log(msg)

    
def print_popup(msg):
    tp_popup(msg, DR_PM_MESSAGE)

class Storage:    
    
    def __init__(self):
        trestle_offset = -150
        # Force definition
        self.force = 60
        # Panto force place
        self.place_force = 80
        # Digital output robot definition
        self.DO_GRIP_QUICK_CHANGER = 9
        self.DO_RELEASE_QUICK_CHANGER = 10
        self.DO_SHUNK_STORAGE = 5
        self.DO_VACUUM_STORAGE = 6
        self.DO_PANTOGRAPH_STORAGE = 7
        self.DO_ACTIVATE_VACUUM = 8
        self.DO_ENABLE_VACUUM = 11 # Need this before you activate the vacuum
        
        # Definition digital robot digital input
        self.DI_VACUUM_FINDED = 13
        
        # Moxa digital input definition
        self.gripper_hocked = "DI_moxa_6"
        self.gripper_released = "DI_moxa_7"
        
        
        # Dictionaries for storage chek and control
        self.pantograph_IO = {
                            "gripper_presence" : "DI_moxa_2",
                            "lock_status" : "DI_moxa_5",
                            "lock_control" : 7
                        }
        
        self.vacuum_IO = {
                            "gripper_presence" : "DI_moxa_1",
                            "lock_status" : "DI_moxa_4",
                            "lock_control" : 6
                        }
        
        self.shunk_IO = {
                            "gripper_presence" : "DI_moxa_0",
                            "lock_status" : "DI_moxa_3",
                            "lock_control" : 5
                        }
        
        # Pos pantograph
        self.pre_grip_pantograph = posx(984.9, -118.57, 53.03, 91.99, 89.72, -179.56) # posx(985.14, -113.00, 54.00, 91.5, 89.77, -179.00) posx(984.29, -113.51, 51.93, 91.71, 89.60, -179.62)
        self.cage_lower_pos = trans(self.pre_grip_pantograph, [0, -100, 0, 0, 0, 0], DR_BASE) 
        self.pre_release_pantograph = trans(self.pre_grip_pantograph, [0, 0, 3, 0, 0, 0], DR_BASE)
        self.cage_upper_pos = trans(self.cage_lower_pos, [0, 0, 190, 0, 0, 0], DR_BASE) 
        self.pre_cage_pos = trans(self.cage_upper_pos, [0,trestle_offset,0,0,0,0], DR_BASE)

        
        # Pos vacuum gripper
        self.frontal_pos_vacuum = posj(169.58, -42.45, -144.5, 77.88, -89.48, 234.37)
        self.pre_grip_vacuum = posx(586.69, 102.24, 259.04, 91.68, 89.54, -89.15)
        self.disapproach_vacuum = posx(586.65, -200.25, 259.03, 91.68, 89.54, -89.15)
        self.z_offs_vacuum = 100
        self.front_pos_pre_release = trans(self.disapproach_vacuum, [0,0,self.z_offs_vacuum,0,0,0], DR_BASE)
        self.pre_release = trans(self.pre_grip_vacuum, [0,0,self.z_offs_vacuum,0,0,0], DR_BASE)
        self.place_release = trans(self.pre_grip_vacuum, [0,3,15,0,0,0], DR_BASE)
        
        
        #Pos Shunk EGU50 Gripper
        self.pos_pick_shunk = posx(653.32, -25.74, 36.1, 178.47, 179.82, 178.88)
        self.pre_pick_shunk = trans(self.pos_pick_shunk, [0,0,-100,0,0,0], DR_TOOL)
        self.to_pick_shunk = trans(self.pos_pick_shunk, [0,0,-200,0,0,0], DR_TOOL)
        self.to_pick_shunk_joint = ikin(self.to_pick_shunk, 7, DR_BASE)
        self.place_shunk = posx(653.24, -25.09, 34.36, 112.35, 179.94, 112.82)
        self.pre_place_shunk = trans(self.place_shunk, [0,-100,0,0,0,0], DR_BASE)
        self.pre_force_shunk = trans(self.place_shunk, [0,-2,0,0,0,0], DR_BASE)
        self.to_place_shunk = trans(self.place_shunk, [0,-200,0,0,0,0], DR_BASE)
        self.to_place_shunk_joint = ikin(self.to_place_shunk, 7, DR_BASE)
        
        
        # Data for linear sensor
        self.MIN_VOLTAGE = 2.30 # Correspond to the maximum height 116.33
        self.MAX_VOLTAGE = 7.22 # Corresponf to the minimum height 51.97
        VOLT_DIFFERENCE = self.MAX_VOLTAGE - self.MIN_VOLTAGE
        MAX_HEIGHT = 116.33
        MIN_HEIGHT = 51.97
        LINEAR_GUIDE_HEIGHT =  MAX_HEIGHT - MIN_HEIGHT
        self.GUIDE_RATIO = LINEAR_GUIDE_HEIGHT / VOLT_DIFFERENCE
        
    def linear_guide_centering(self, current_tcp = "quick_changer"):
        # Calculate the middle point of the sensor
        middle = (self.MAX_VOLTAGE + self.MIN_VOLTAGE) / 2
        # Get the current reading of the analog sensor
        current_pos = round(get_analog_input(ch = 1),2)
        # Calculate the distance to do do go in the middle
        distance_to_middle = self.GUIDE_RATIO * (current_pos - middle)
        mwait(0)
        set_tcp("quick_changer")
        movel(posx(0,0,distance_to_middle,0,0,0), mod = DR_MV_MOD_REL)
        mwait(0)
        set_tcp(current_tcp)

        
    def grip_shunk(self):
        movej(self.to_pick_shunk_joint)
        mwait(0)
        set_tcp("quick_changer")
        # Move in joint space in front of the vacuum gripper
        movel(self.pre_pick_shunk)
        movel(self.pos_pick_shunk)        
        # Start force task
        self.force_task(gripper_io = self.shunk_IO, force_desired= self.force, force_axis= DR_AXIS_Z, release_gripper_storage = True)
        # Go back
        movel(self.pre_place_shunk)
        # Return to the starting postion
        movej(self.to_place_shunk_joint)
        mwait(0)
        set_tcp("pinza_due_dita")
        
        
    def place_shunk_gripper(self):
        self.open_shunk_block()
        movej(self.to_place_shunk_joint)
        mwait(0)
        set_tcp("quick_changer")
        # Move in joint space in front of the vacuum gripper
        movel(self.pre_place_shunk)
        print_log(str(get_current_posx()))
        movel(self.pre_force_shunk)
        wait(1)
        # Start force control z base
        self.force_task(gripper_io = self.shunk_IO, force_desired= self.force, force_axis= DR_AXIS_Y, release_gripper_storage = False)
        # return to initial pos
        movel(self.pre_pick_shunk)
        
    
    def grip_vacuum_gripper(self):
        # Move in joint space in front of the vacuum gripper
        movej(self.frontal_pos_vacuum)
        movel(self.pre_grip_vacuum)
        self.force_task(gripper_io = self.vacuum_IO, force_desired= self.force, force_axis= DR_AXIS_Z, release_gripper_storage = True)
        movel(self.pre_release)
        movel(self.front_pos_pre_release)
        # return to initial pos
        movel(self.front_pos_pre_release)
   
        
    def place_vacuum_gripper(self):
        # Disable air passage
        set_digital_output(11, OFF)
        # Move in joint space in front of the vacuum gripper
        movej(self.frontal_pos_vacuum)
        movel(self.front_pos_pre_release)
        movel(self.pre_release)
        movel(self.place_release)
        wait(1)
        # Start force control z base
        self.force_task(gripper_io = self.vacuum_IO, force_desired= self.force, force_axis= DR_AXIS_Y, release_gripper_storage = False)       
        # return to initial pos
        movel(self.disapproach_vacuum)
        
        
    def open_block(self, gripper_io):
        set_digital_output(gripper_io["lock_control"], ON)
        wait(1)
        # Check if hocked if not relese the grip and the force and return tu the approch position
        if get_modbus_input(gripper_io["lock_status"]):
            print_popup("Error in unlocking the storage for the pantograph")
            exit()
        
            
    def close_block(self, gripper_io):
        set_digital_output(gripper_io["lock_control"], OFF)
        wait(1)
        # Check if hocked if not relese the grip and the force and return tu the approch position
        if not get_modbus_input(gripper_io["lock_status"]):
            print_popup("Error in locking the storage for the pantograph")
            exit()
    
            
    def grip_quick_changer(self):
        set_digital_output(self.DO_RELEASE_QUICK_CHANGER,OFF)
        set_digital_output(self.DO_GRIP_QUICK_CHANGER,ON)
        wait(1)
        # Check if hocked if not relese the grip and the force and return tu the approch position
        if not get_modbus_input(self.gripper_hocked):
            self.release_quick_changer()
            release_force()      
            print_popup("Error in hocking the quick changer")
        print_log("hoocked to quick changer") 
    
        
    def release_quick_changer(self):
        set_digital_output(self.DO_GRIP_QUICK_CHANGER,OFF)
        set_digital_output(self.DO_RELEASE_QUICK_CHANGER, ON)
        wait(1)
        if not get_modbus_input(self.gripper_released):
            self.grip_quick_changer()
            release_force()     
            print_popup("error in releasing the quick changer")
        print_log("unhoocked")     
        
        
    def force_task(self, gripper_io, force_desired = None, force_axis = DR_AXIS_Z, release_gripper_storage : bool = True ):
        if force_desired is None:
            force_desired = self.force
        mwait(0)
        set_ref_coord(DR_TOOL)
        k_d = [10000.0, 3000.0, 10000.0, 1000.0, 1000.0, 1000.0] 
        task_compliance_ctrl(k_d)
        f_d = [0.0, 0.0, 0, 0.0, 0.0, 0.0]
        f_dir = [0, 0, 0, 0, 0, 0]
        if force_axis == DR_AXIS_Z:
            f_d[2] = force_desired
            f_dir[2] = 1
        elif force_axis == DR_AXIS_Y:
            f_d[1] = force_desired
            f_dir[1] = 1
        elif force_axis == DR_AXIS_X:
            f_d[0] = force_desired
            f_dir[0] = 1
        set_desired_force(f_d, f_dir, mod = DR_FC_MOD_REL)
         
        # Force and compliance control after detecting external force
        force_check = self.force
        force_condition = check_force_condition(force_axis, max=force_check, ref=DR_TOOL)
        while (force_condition):
            force_condition = check_force_condition(force_axis, max=force_check, ref=DR_TOOL)
            if force_condition == 0:
                break
        # Print the arrival position
        print_log("arrived")
        wait(2)
        print_log(str(get_current_posx(ref=DR_BASE)[0]))               
        
        if release_gripper_storage: # Once in position grip to the quick changer try unlocking the storage block
            self.grip_quick_changer() 
            self.open_block(gripper_io = gripper_io)
        else:
            self.close_block(gripper_io = gripper_io) # Once in position try locking the storage block and then release the quick changer
            self.release_quick_changer()
        release_force()
        release_compliance_ctrl()
        set_ref_coord(DR_BASE)      
                
    def pick_pantograph(self):
    
        #movel(self.cage_lower_pos)
        movel(self.pre_grip_pantograph, v = 20, a = 20)
        # Start the force task to as near as possible to the slave side of the quick changer
        self.force_task(gripper_io = self.pantograph_IO, force_desired= self.force, force_axis= DR_AXIS_Z, release_gripper_storage = True)
        set_tool("weight_pantograph")
        # Return to the starting postion
        movel(self.cage_lower_pos, v = 20, a = 20)    
    
        
    def place_pantograph(self):
    
        self.open_block(gripper_io = self.pantograph_IO)          
        movel(self.cage_lower_pos)
        # Correct the pos before force control
        movel(trans(self.pre_release_pantograph, [-3,2,0,0,0,0], DR_TOOL), v = 20, a = 20)
        self.force_task(gripper_io = self.pantograph_IO, force_desired= self.place_force, force_axis= DR_AXIS_Z, release_gripper_storage = False)
        # Go a little below to compensate for the bending of the support
        movel(self.pre_grip_pantograph)
        # Return to the starting postion
        movel(self.cage_lower_pos)
        set_tool("quick_changer_weight")
   
    
class ManipulatorController:
    def __init__(self):
        self.TCP_PANTOGRAPH = [500,0,50,30,90,0]
        # Create a lock to avoid race condition
        self.lock = Lock()
        self.LENGTH_LABYRINTH = 20 # Length of the gear to activate the manual gripper taht is the pantograph
        self.MARGIN = 7
        self.T_WAIT = 0.05
        self.LONG_WAIT = 1
        self.T_WAIT_MOVE = 0.7
        self.TIME_RESTING = 4
        self.ONE_METER_TO_MM = 1000
        self.CONVERSION_FACTOR = 0.00030231
        self.N_ROPE = 2
        self.MAX_NUMB_WORD = 65536
        self.MIN_VOLTAGE = 2.30 # Correspond to the maximum height 116.33
        self.MAX_VOLTAGE = 7.22
        
        # Dictionary for control word to send
        self.control_dict = {
            "bit_0_control": 0,
            "bit_1_empty": 1,
            "bit_2_pos_control": 2,
            "bit_3_vel_control": 3,
            "bit_4_emergency": 4,
            "bit_5_com_error": 5,
            "bit_6_reset": 6,
            "bit_7_hooked": 7
        }
        # Boolean values control word to send
        self.status_send = {
            "bit_0_control": True,
            "bit_1_empty": False,
            "bit_2_pos_control": True,
            "bit_3_vel_control": False,
            "bit_4_emergency": False,
            "bit_5_com_error": False,
            "bit_6_reset": False,
            "bit_7_hooked": False
        }
        self.send_counter = 0
        self.height = 0
        self.speed_limit = 0

        # Boolean values for the status received from the lifter
        self.status_recv = {
            "bit_0_status_control": False,
            "bit_1_resetted": False,
            "bit_2_wrong_command": False,
            "bit_3_error_from_man": False,
            "bit_4_just_resetted": False,
            "bit_5_resting": False
        }
        # Dictionary for the feedback received from the manipulator
        self.index_feedback = {
            "bit_0_status_control": 0,
            "bit_1_resetted": 1,
            "bit_2_wrong_command": 2,
            "bit_3_error_from_man" : 3,
            "bit_4_just_resetted": 4,
            "bit_5_resting": 5
        }
        self.recv_counter = 0
        self.estimated_weight = 0
        self.actual_pos = 0
        self.target_pos = 0
        self.actual_vel = 0
        self.previous_counter = -1
        
        ############# Start Thread for communication #############       
        self.modbus_thread = thread_run(self.modbus_comm, loop = True)
        # set bit to control the manipulator
        self.set_control()
        
    def signed_to_unsigned(self, signed):
        if signed > 0:
            return signed
        else:
            return signed + self.MAX_NUMB_WORD


    # Function tp convert the bit data received from the manipulator to the data used in the main program    
    def convert_recv_data(self, w_actual_vel, w_target_pos, w_actual_pos, w_feedback):
        self.actual_vel = modbus_unsigned_to_signed(w_actual_vel)
        self.actual_pos = modbus_unsigned_to_signed(w_actual_pos)
        # Copy manipulator height to reg 128 for codesys to read
        set_output_register_int(0, w_actual_pos)
        self.target_pos = modbus_unsigned_to_signed(w_target_pos)
        #print_log(bin(w_feedback))
        # Extract bit flags from feedback word based on index_feedback
        self.status_recv = {
            name : bool((w_feedback >> index) & 1) 
            for name, index in self.index_feedback.items()
            }
        # Extract 2 bit counter from bit 6-7
        self.recv_counter = (w_feedback >> 6) & 0b11 
        # Extract 8 bit weight from bit 8-15
        self.estimated_weight = (w_feedback >> 8) & 0XFF


            
    def modbus_comm(self):
        # If the counter doesn't change jump the writing modbus registers instructions
        if self.recv_counter != self.previous_counter:
            self.previous_counter = self.recv_counter # Set the previous counter before updating the counter
            with self.lock:
                word_int_bool = self.covert_send_data()
                height_unsigned = self.signed_to_unsigned(self.height)
                try:
                    if set_modbus_output_multi("out", [self.speed_limit, height_unsigned, self.send_counter , word_int_bool]):
                        print_popup("Impossibile settare i registri in modbus")
                        exit()
                except:
                    print_popup("Impossibile comunicare in modbus")
                    exit()
        # Reset the counter to 0 if it is greater than 2, otherwise increment it by 1
        self.send_counter = 0 if self.send_counter > 2 else self.send_counter + 1 

        # Always try read the register waiting for new data ( the counter have to change)
        try:
            res, var_list = get_modbus_inputs_list(iobus_list=["in_0", "in_1", "in_2", "in_3"])
            if res < 4: 
                print_popup("Ho ricevuto solo {}".format(res))
                exit()
        except:
            print_popup("Impossibile leggere i registri in modbus")
            exit()
        
        word_actual_vel, word_target_height, word_actual_height, word_feedback = var_list
        # Convert the read data
        with self.lock:
            self.convert_recv_data(word_actual_vel, word_target_height, word_actual_height, word_feedback)
        time.sleep(self.T_WAIT)  

        
    def covert_send_data(self):
        control_bitmask  = 0        
        # Convert the boolean values in the status_send dictionary to an integer
        for bit_name, bit_index in self.control_dict.items():
            if self.status_send[bit_name]:
                control_bitmask  = control_bitmask  | (1 << bit_index) # Set the bit in the byte mask if the value is True    
        return control_bitmask 


    def mm_to_rpm(self, cobot_speed_target):
        target_in_meter = cobot_speed_target / self.ONE_METER_TO_MM
        conversion_factor = self.CONVERSION_FACTOR / self.N_ROPE # Adapt the conversion factor to the number of rope of the manipulator
        return round(target_in_meter / conversion_factor) # Returns the rotation speed rounded to the nearest integer, in mm/s, of the cobot's target speed.
        

    def rpm_to_mm(self, rpm_target):
        conversion_factor = self.CONVERSION_FACTOR / self.N_ROPE # Adapt the conversion factor to the number of rope of the manipulator
        target_meter = rpm_target * conversion_factor         
        return round((target_meter * self.ONE_METER_TO_MM), 4) # Return mm/s speed from rpm of the cobot target speed
        

    def reset_param(self):
        try:
            if set_modbus_output_multi("out", [0, 0, 0, 0]):
                print_popup("Impossibile settare")
        except:
            print_popup("Impossibile comunicare in modbus")
            exit()
        
        
    def set_control(self):
        # Lock the thread to avoid race condition while writing the variable 
        with self.lock:
            self.status_send["bit_0_control"] = True
        while True:
            print_log("I'm checking for control feedback")
            with self.lock:
                if self.status_recv["bit_0_status_control"]:
                    break
            time.sleep(self.T_WAIT)
    
    def stop_lifter_and_exit(self):
        # Stop the robot and the lifter
        stop(DR_SSTOP)
        print_log("Stopping the robot")
        print_log("I will stop the thread") 
        try:
            thread_stop(self.modbus_thread)
        except:
            thread_stop(self.modbus_thread)
        print_log("Thread stopped")
        self.reset_param()
        time.sleep(self.LONG_WAIT)
        exit()
            
    def reset_height(self):        
        with self.lock:
            is_resetted = self.status_recv["bit_1_resetted"]
        # Send the reset command
        with self.lock:
            self.status_send["bit_6_reset"] = True            
        # If the status is already reset check the just rest bit
        if is_resetted: 
            # Wait for JUST_RESETTED status before continuing and avoid race condition with the lock
            start = time.time()
            while True:
                print_log("I'm checking for JUST RESET feedback {0}".format(self.status_recv["bit_4_just_resetted"]))
                with self.lock:
                    just_reset_status = self.status_recv["bit_4_just_resetted"]
                if just_reset_status:
                    break
                elif time.time() - start > 10 :
                    print_log("No reset received")
                    self.stop_lifter_and_exit()
                        
                time.sleep(self.T_WAIT)
        # Check the reset status for the first time after the manipulator is booted up
        else:
            start = time.time()
            # Wait for reset status before continuing and avoid race condition with the lock
            while True:
                print_log("I'm checking for reset feedback {0}".format(self.status_recv["bit_1_resetted"]))
                with self.lock:
                    resetted_status = self.status_recv["bit_1_resetted"]
                if resetted_status:
                    break
                elif time.time() - start > 10 :
                    print_log("No reset received")
                    self.stop_lifter_and_exit()                        
                time.sleep(self.T_WAIT)                
        # Remove the reset output
        with self.lock:
            print_log("ho messo il bit di reset a 0")
            self.status_send["bit_6_reset"] = False
            
            
    def move_sync(self, height, vel_cobot, pos_cobot, cobot_delayed_start = False):
        with self.lock:
            target = height * self.N_ROPE # Double rope manipulator need to double the paramenter                          
            self.height = target 
            self.speed_limit = self.mm_to_rpm(vel_cobot)
            vel_cobot = self.rpm_to_mm(self.speed_limit)
        # Delay the robot start when the manipulator is moving up to compensate the delay of the lifter and the stretched out rope
        if cobot_delayed_start:
            time.sleep(0.4)
        amovel(pos_cobot, vel = vel_cobot, acc = vel_cobot * 5 )
        # Wait for the manipulator to be ready to move
        status_vel = 0
        while not status_vel:
            with self.lock:
                status_vel = self.actual_vel
            time.sleep(self.T_WAIT)
        if (self.target_pos != target): # Check that the lifter target pos correspond to the one setted
            print_log("Target pos received = {0} and target sent = {1}".format(self.target_pos, target))
            print_log("Reset and close the program")
            self.stop_lifter_and_exit()
        start_time = time.time() # Startup time to ignore the first 2 seconds of rest and speed=0 due to the lifter rope being tensioned.
        # Wait for the manipulator to reach the target position or to stop for other reasons
        while True:
            with self.lock:
                vel_status = self.actual_vel            
                resting = self.status_recv["bit_5_resting"]
                wrong_command = self.status_recv["bit_2_wrong_command"]
                error_from_manipulator = self.status_recv["bit_3_error_from_man"]
                pos_manipulator = self.actual_pos
                target = target
                print_log("actual_pos: {0} target: {1}".format(pos_manipulator, target))
                print_log("Estimated weight: {0}".format(self.estimated_weight))
            pos_linear_guide = round(get_analog_input(ch = 1),2)    
            #if resting and (time.time() - start_time > self.TIME_RESTING): # If the manipulator is resting for more than the defined time stop the robot
                #stop(DR_SSTOP)
                #print_log("Stopped due to resting")
                #print_log("height: {0}".format(height))
                #break
            if (vel_status == 0) and (time.time() - start_time > self.TIME_RESTING): # If the manipulator is not moving for more than the defined time stop the robot
                stop(DR_SSTOP)
                print_log("Stopped due to speed == 0")
                print_log("height: {0}".format(height))
                break
            # Check if the manipulator is in the target position
            if (pos_manipulator >= (target - self.MARGIN)) and  (pos_manipulator <= (target + self.MARGIN)):
                stop(DR_SSTOP)
                print_log("Stopped due to arriving in position")
                break
            elif pos_linear_guide < self.MIN_VOLTAGE + 0.40 or pos_linear_guide > self.MAX_VOLTAGE - 0.40:
                stop(DR_SSTOP)
                print_log("Stopped due to linear sensor out of range")
                print_log("height: {0}".format(height))
                self.reset_param() # Reset the manipulator parameters to stop it
                break
            elif wrong_command:
                print_log("Stopped due to command error")
                self.stop_lifter_and_exit()
            elif error_from_manipulator:
                print_log("Stopped due to manipulator error")
                self.stop_lifter_and_exit()
                
            time.sleep(self.T_WAIT)
        with self.lock:
            self.speed_limit = 0 # Set to 0 the speed to avoid to start again
        mwait(0)
    
        
    def current_man_offset(self,target_z):
        # Need to divide by two because the measure is double due to the double rope
        return self.actual_pos / self.N_ROPE + target_z
            