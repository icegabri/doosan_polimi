# Main script: controllo del prelievo e rilascio del pantografo
# Requisiti: controller.drl con classi Storage e ManipulatorController

# Inport sub program
controller = sub_program_run("controller")

    
def pantografo():
    # Initialized Storage class to pick and release the grippers
    storage = controller.Storage()
    # Initialized ManipulatorController and with that the lifter communication thread
    control = controller.ManipulatorController()

    # Pos definition
    joint_pre_panto_grip = trans(storage.pre_grip_pantograph, [0, 0, -50, 0, 0, 0], DR_TOOL)

    # Set joint and task speed
    set_accx(50,10)
    set_velx(50,10)
    set_accj(5)
    set_velj(5)

    # Set weight and tcp
    set_tcp("quick_changer")
    set_tool("quick_changer_weight")

    move_home(DR_HOME_TARGET_USER)
    
    # move in joint in front of the quick changer of the pantograph
    movejx(joint_pre_panto_grip, sol=7)
    storage.pick_pantograph()

    # reset dell'altezza del manipolatore all'altezza attuale
    control.reset_height()
    # set target vel for cobot and manipulator when hooked
    target_vel = 30
    # offset to move the lifter
    offset_cobot =  storage.cage_upper_pos[2] - storage.cage_lower_pos[2]
    offset_balancer = control.current_man_offset(offset_cobot)
    # lifter and cobot sinch movement  
    control.move_sync(height = offset_balancer, vel_cobot = target_vel, pos_cobot = storage.cage_upper_pos, cobot_delayed_start = True)

    # move outside where we can rotate the gripper
    movel(storage.pre_cage_pos, vel=30, acc=10)
    rotated_pos = trans(storage.pre_cage_pos, [0,0,0,-90,0,0], DR_BASE)
    movel(rotated_pos, vel=[15,7], acc=[15,7])

    #move in the middle of the linear guide
    storage.linear_guide_centering()
    movel(storage.pre_cage_pos, vel=[15,7], acc=[15,7])

    # Set the offset negative for the descent
    offset_cobot =  -offset_cobot
    offset_balancer = control.current_man_offset(offset_cobot)

    movel(storage.cage_upper_pos)
    storage.linear_guide_centering()

    control.move_sync(height = offset_balancer, vel_cobot = target_vel, pos_cobot = storage.cage_lower_pos, cobot_delayed_start = False)
    wait(1)

    storage.place_pantograph()

    move_home(DR_HOME_TARGET_USER)

    # Stop the thread and exit the program
    control.stop_lifter_and_exit()
    
    
    
pantografo()

